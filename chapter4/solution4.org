* Concavity

** Solution 1

*** Solution a

| Property         | Interval              |
|------------------+-----------------------|
| Concave up       | $[r,s], [s,t], [u,v]$ |
| Concave down     | $[p,q], [q,r], [t,v]$ |
| Inflection point | r,t,v                 |

*** Solution b

| Property         | Interval/Points           |
|------------------+---------------------------|
| Concave up       | $[r,s],[s,t],[t,u],[u,v]$ |
| Concave down     | $[p,q],[q,r],[v,w]$       |
| Inflection point | r,v                       |

** Solution 2

#+begin_src gnuplot :exports both :file ../assets/c4_4s2.png :eval never-export
set terminal png notransparent nointerlace rounded font "Alegreya, 14"

set xlabel "x"
set ylabel "f(x)"
set grid
set key right top
plot x**3 - 3*(x**2) + 3 title "x^3 - 3x^2 + 3" ls 1
#+end_src

#+RESULTS:
[[file:../assets/c4_4s2.png]]

$f(x) = x^3 - 3x^2 + 3$

Domain: $(-\infty, \infty)$

$f'(x) = 3x^2 - 6x$

There are no points where $f$ is not differentiable but there are two
points where the derivative is $0$.

$x=0,2$

$f''(x) = 6x-6$

Notice that $f, f', f''$ are all continous everywhere. Clearly $f'(x)
= 0$ when $x=0,2$. $f''(x) = 0$ when $x=1$

Now let's test sample points:

| Function | Value  |
|----------+--------|
| f'(-1)   | 9 > 0  |
| f'(1)    | -3 < 0 |
| f'(3)    | 9 > 0  |
| f''(0)   | -6 < 0 |
| f''(2)   | 6 > 0  |

todo

| Property         | Value                                    |
|------------------+------------------------------------------|
| $(-\infty, 0]$   | Strictly increasing, concave down        |
| $[0,2]$          | Strictly decreasing, concave up and down |
| $[2,\infty)$     | Strictly increasing, concave up          |
| Inflection point | 1                                        |
| Local maxima     | 0                                        |
| Local minima     | 2                                        |


** Solution 3

#+begin_src gnuplot :exports both :file ../assets/c4_4s3.png :eval never-export
set terminal png notransparent nointerlace rounded font "Alegreya, 14"

set xlabel "x"
set ylabel "g(x)"
set grid
set key right top
plot x**3 - 6*(x**2) - 15*x - 20 title "x^3 + 6x^2 -15x - 20" ls 1
#+end_src

#+RESULTS:
[[file:../assets/c4_4s3.png]]

$g(x) = x^3 + 6x^2 - 15x - 20$

Domain: $(-\infty, \infty)$

$g'(x) = 3x^2 + 12x - 15$

$g''(x) = 6x + 12$

Notice that $g, g', g''$ are all continous everywhere. $g'(x) = 0$
where $x = -5, 1$. $g''(x) = 0$ when $x=-2$.

Now let's test sample points:

| Function | Value   |
|----------+---------|
| g'(-6)   | 21 > 0  |
| g'(-4)   | -15 < 0 |
| g'(0)    | -15 < 0 |
| g'(2)    | 21 > 0  |
| g''(-3)  | -6 < 0  |
| g''(-1)  | 6 > 0   |

todo

| Property         | Value               |
|------------------+---------------------|
| $(-\infty, -5]$  | Strictly increasing |
| $[-5,1]$         | Strictly decreasing |
| $[1,\infty)$     | Strictly increasing |
| Inflection point | -2                  |
| Local maxima     | -5                  |
| Local minima     | 1                   |
| $(-\infty, -2]$  | Concave down        |
| $[-2, \infty)$   | Concave up          |

** Solution 12

#+begin_src emacs-lisp :eval never-export :exports both
    (defun singleDerivative (x)
    (let* ((num (- 3 (expt x 2)))
          (den (expt (+ (expt x 2) 3) 2))
          (res (/ num den)))
      res)
      )
#+end_src

#+RESULTS:
: singleDerivative

Now let's find the values for the single derivative:

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 1.0)
#+end_src

#+RESULTS:
: 0.125

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 2.0)
#+end_src

#+RESULTS:
: -0.02040816326530612

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -1.0)
#+end_src

#+RESULTS:
: 0.125

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -2.0)
#+end_src

#+RESULTS:
: -0.02040816326530612

#+begin_src emacs-lisp :eval never-export :exports both
  (defun doubleDerivative (x)
    (let* ((num (* 2 (* x (- (expt x 2) 9))))
            (den (expt (+ 3 (expt x 2)) 3))
            (res (/ num den)))
    res
      ))
#+end_src

#+RESULTS:
: doubleDerivative

Now let's find the value for the double derivatives:

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -1.0)
#+end_src

#+RESULTS:
: 0.25

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 1.0)
#+end_src

#+RESULTS:
: -0.25

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 2.0)
#+end_src

#+RESULTS:
: -0.05830903790087463

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -2.0)
#+end_src

#+RESULTS:
: 0.05830903790087463

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -4.0)
#+end_src

#+RESULTS:
: -0.008164455459979588

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 4.0)
#+end_src

#+RESULTS:
: 0.008164455459979588

** Solution 13

#+begin_src emacs-lisp :eval never-export :exports both
    (defun singleDerivative (x)
    (let* ((num (* 6 x))
          (den (expt (+ (expt x 2) 3) 2))
          (res (/ num den)))
      res)
      )
#+end_src

#+RESULTS:
: singleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -1.0)
#+end_src

#+RESULTS:
: -0.375

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 1.0)
#+end_src

#+RESULTS:
: 0.375

#+begin_src emacs-lisp :eval never-export :exports both
  (defun doubleDerivative (x)
    (let* ((num (- 18 (* 18 (expt x 2))))
            (den (expt (+ (expt x 2) 3) 3))
            (res (/ num den)))
    res
      ))
#+end_src

#+RESULTS:
: doubleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 0.0)
#+end_src

#+RESULTS:
: 0.6666666666666666

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 2.0)
#+end_src

#+RESULTS:
: -0.15743440233236153

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -2.0)
#+end_src

#+RESULTS:
: -0.15743440233236153

** Solution 13

#+begin_src emacs-lisp :eval never-export :exports both
  (defun singleDerivative (x)
    (let* ((num (+ (expt x 4) (* 9 (expt x 2))))
           (den (expt (+ (expt x 2) 3) 2))
            (res (/ num den)))
    res
      ))
#+end_src

#+RESULTS:
: singleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -1.0)
#+end_src

#+RESULTS:
: 0.625

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 1.0)
#+end_src

#+RESULTS:
: 0.625

#+begin_src emacs-lisp :eval never-export :exports both
  (defun doubleDerivative (x)
    (let* ((num (* 6 x (- 9 (expt x 2))))
           (den (expt (+ (expt x 2) 3) 3))
            (res (/ num den)))
    res
      ))
#+end_src

#+RESULTS:
: doubleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -4.0)
#+end_src

#+RESULTS:
: 0.024493366379938767

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -2.0)
#+end_src

#+RESULTS:
: -0.1749271137026239

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -1.0)
#+end_src

#+RESULTS:
: -0.75

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 1.0)
#+end_src

#+RESULTS:
: 0.75

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 2.0)
#+end_src

#+RESULTS:
: 0.1749271137026239

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 4.0)
#+end_src

#+RESULTS:
: -0.024493366379938767

** Solution 14

#+begin_src emacs-lisp :eval never-export :exports both
    (defun singleDerivative (x)
      (let* ((num (* 16 x))
             (den (sqrt (+ (expt x 2) 1)))
             (res (/ num den))
             (sol (- res (* 2 x))))
      sol
        ))
#+end_src

#+RESULTS:
: singleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -1.0)
#+end_src

#+RESULTS:
: -9.31370849898476

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 1.0)
#+end_src

#+RESULTS:
: 9.31370849898476

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 6.0)
#+end_src

#+RESULTS:
: 3.7823027813143

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 8.0)
#+end_src

#+RESULTS:
: -0.12355397258131617

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -6.0)
#+end_src

#+RESULTS:
: -3.7823027813143

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative -8.0)
#+end_src

#+RESULTS:
: 0.12355397258131617

#+begin_src emacs-lisp :eval never-export :exports both
  (defun doubleDerivative (x)
    (let* ((num 16)
           (den (expt (+ 1 (expt x 2)) 1.5))
           (res (/ num den))
           (sol (- res 2)))
    sol
      ))
#+end_src

#+RESULTS:
: doubleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 0.0)
#+end_src

#+RESULTS:
: 14.0

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 2.0)
#+end_src

#+RESULTS:
: -0.5689164944001346

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative -2.0)
#+end_src

#+RESULTS:
: -0.5689164944001346

** Solution 15

#+begin_src emacs-lisp :eval never-export :exports both
  (defun singleDerivative (x)
    (let* ((num (+ 1 (* 2 (cos x)))))
    num
      ))
#+end_src

#+RESULTS:
: singleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative pi)
#+end_src

#+RESULTS:
: -1.0

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative (* 2 pi))
#+end_src

#+RESULTS:
: 3.0

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative 0)
#+end_src

#+RESULTS:
: 3.0

#+begin_src emacs-lisp :eval never-export :exports both
(singleDerivative (* 1.5 pi))
#+end_src

#+RESULTS:
: 0.9999999999999997

#+begin_src emacs-lisp :eval never-export :exports both
  (defun doubleDerivative (x)
    (let* ((num (* -2 (* 2 (sin x)))))
    num
      ))
#+end_src

#+RESULTS:
: doubleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative pi)
#+end_src

#+RESULTS:
: -4.898587196589413e-16

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 0)
#+end_src

#+RESULTS:
: -0.0

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative (* 1.5 pi))
#+end_src

#+RESULTS:
: 4.0

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative (/ (* 2 pi) 3))
#+end_src

#+RESULTS:
: -3.464101615137755

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative (/ (* 4 pi) 3))
#+end_src

#+RESULTS:
: 3.4641016151377535

** Solution 16

#+begin_src emacs-lisp :eval never-export :exports both
  (defun doubleDerivative (x)
    (let* ((num (- 2 (* 4 (sin x)))))
    num
      ))
#+end_src

#+RESULTS:
: doubleDerivative

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative 0.0)
#+end_src

#+RESULTS:
: 2.0

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative (/ pi 2.0))
#+end_src

#+RESULTS:
: -2.0

#+begin_src emacs-lisp :eval never-export :exports both
(doubleDerivative pi)
#+end_src

#+RESULTS:
: 1.9999999999999996

** Solution 17
