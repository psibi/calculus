* Sophisticated Graphing

** Solution 1

#+begin_src gnuplot :exports both :file ../assets/c5_5s1.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (2*x - 1) / (x**2)
  set yrange [-5:5]
  set xrange [-5:5]
  set label "I" at 1.5, f(1.5) center point pointtype 7 pointsize 2 offset 1
  set label "C" at 1, f(1) center point pointtype 6 pointsize 2 offset -2
  plot (x > 0 ? f(x) : 1/0) ls 1 t "2x-1/x^2", (x < 0 ? f(x) : 1/0) ls 1 t "", 0 with lines ls 2 t "asymptote"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s1.png]]

C = Critical number

I = Inflection point

** Solution 2

#+begin_src gnuplot :exports both :file ../assets/c5_5s2.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "g(x)"
  set grid
  set key right top
  g(x) = (2/(x**2)) - (1/x)
  set yrange [-1:8]
  set xrange [-5:10]
  set label "I" at 6, g(6) left point pointtype 7 pointsize 2 offset 1
  set label "C" at 4, g(4) center point pointtype 6 pointsize 2 offset -1
  plot (x > 0 ? g(x) : 1/0) ls 1 t "2/x^2 - 1/x", (x < 0 ? g(x) : 1/0) ls 1 t "" , 0 with lines ls 2 t "asymptote"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s2.png]]

** Solution 3

#+begin_src gnuplot :exports both :file ../assets/c5_5s3.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (x/(4 - x**2))
  set yrange [-3:3]
  set xrange [-5:5]
  set label "I" at 0, f(0) center point pointtype 7 pointsize 2 offset -2
  plot (x < -2 ? f(x) : 1/0) ls 1 t "x/(4-x^2)", (x < 2 ? f(x) : 1/0) ls 1 t "" , (x > 2 ? f(x) : 1/0) ls 1 t "", 0 with lines ls 2 t "asymptote"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s3.png]]

** Solution 4

#+begin_src gnuplot :exports both :file ../assets/c5_5s4.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (x**2/(4 - x**2))
  set yrange [-3:3]
  set xrange [-5:5]
  set label "C" at 0, f(0) center point pointtype 7 pointsize 2 offset -2
  plot (x < -2 ? f(x) : 1/0) ls 1 t "x^2/(4-x^2)", (x < 2 ? f(x) : 1/0) ls 1 t "" , (x > 2 ? f(x) : 1/0) ls 1 t "", -1 with lines ls 2 t "asymptote"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s4.png]]


#+begin_src octave :session both :eval never-export :exports both
  function y = firstDerivative(x)
    num = 8 * x;
    den = (4-x^2)^2;
    y = num / den;
  end

  ans = [firstDerivative(-1), firstDerivative(-3), firstDerivative(1), firstDerivative(3)]
#+end_src

#+RESULTS:
| -0.8888888888888888 | -0.96 | 0.8888888888888888 | 0.96 |

#+begin_src octave :session both :eval never-export :exports both
  function y = secondDerivative(x)
    num = 24*(x^2) + 32
    den = (4-x^2)^3
    y = num / den;
  end

  ans = [secondDerivative(-3), secondDerivative(-1), secondDerivative(0), secondDerivative(1), secondDerivative(3)]
#+end_src

#+RESULTS:
| -1.984 | 2.074074074074074 | 0.5 | 2.074074074074074 | -1.984 |

** Solution 5

#+begin_src gnuplot :exports both :file ../assets/c5_5s5.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (x**3 + 2)/x
  set yrange [-10:10]
  set xrange [-5:5]
  set label "C" at 1, f(1) center point pointtype 7 pointsize 2 offset -2
  set label "I" at -1.25, f(-1.25) center point pointtype 7 pointsize 2 offset -2
  plot (x < 0 ? f(x) : 1/0) ls 1 t "x^3 + 2/x", (x > 0 ? f(x) : 1/0) ls 1 t ""
#+end_src

#+RESULTS:
[[file:../assets/c5_5s5.png]]

#+begin_src octave :session both :eval never-export :exports both
  function y = firstDerivative(x)
    num = 2*x^3 - 2
    den = x^2
    y = num / den;
  end

  ans = [firstDerivative(-2), firstDerivative(-1.25), firstDerivative(-1), firstDerivative(1), firstDerivative(2)]
#+end_src

#+RESULTS:
| -4.5 | -3.78 | -4 | 0 | 3.5 |

#+begin_src octave :session both :eval never-export :exports both
  function y = secondDerivative(x)
    num = 2*x^3 + 4
    den = x^3
    y = num / den;
  end

  ans = [secondDerivative(-2), secondDerivative(-1), secondDerivative(1), secondDerivative(2)]
#+end_src

#+RESULTS:
| 1.5 | -2 | 6 | 2.5 |

** Solution 6

#+begin_src gnuplot :exports both :file ../assets/c5_5s6.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "g(x)"
  set grid
  set key right top
  g(x) = x + (4/x)
  set yrange [-20:20]
  set xrange [-5:5]
  set label "C" at -2, g(-2) left point pointtype 7 pointsize 2 offset -2
  set label "C" at 2, g(2) left point pointtype 7 pointsize 2 offset -2
  plot (x < 0 ? g(x) : 1/0) ls 1 t "x + 4/x", (x > 0 ? g(x) : 1/0) ls 1 t ""
#+end_src

#+RESULTS:
[[file:../assets/c5_5s6.png]]

#+begin_src octave :session both :eval never-export :exports both
  function y = firstDerivative(x)
    num = 4
    den = x^2
    y = 1 - (num / den);
  end

  ans = [firstDerivative(-3), firstDerivative(-2), firstDerivative(-1), firstDerivative(1), firstDerivative(3)]
#+end_src

#+RESULTS:
| 0.5555555555555556 | 0 | -3 | -3 | 0.5555555555555556 |

#+begin_src octave :session both :eval never-export :exports both
  function y = secondDerivative(x)
    den = x^3
    y = 8 / den;
  end

  ans = [secondDerivative(-3), secondDerivative(-2), secondDerivative(-1), secondDerivative(1), secondDerivative(2), secondDerivative(3) ]
#+end_src

#+RESULTS:
| -0.2962962962962963 | -1 | -8 | 8 | 1 | 0.2962962962962963 |

** Solution 7

#+begin_src gnuplot :exports both :file ../assets/c5_5s7.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (x**2 + x + 2)/(x-1)
  set yrange [-20:20]
  set xrange [-2:4]
  set label "C" at -1, f(-1) left point pointtype 7 pointsize 2 offset -2
  set label "C" at 3, f(3) left point pointtype 7 pointsize 2 offset -2
  plot (x < 1 ? f(x) : 1/0) ls 1 t "x + 4/x", (x > 1 ? f(x) : 1/0) ls 1 t ""
#+end_src

#+RESULTS:
[[file:../assets/c5_5s7.png]]

#+begin_src octave :session both :eval never-export :exports both
  function y = firstDerivative(x)
    num = x^2 - (2*x) - 3
    den = (x-1)^2
    y = num / den;
  end

  ans = [firstDerivative(-2), firstDerivative(-1), firstDerivative(0), firstDerivative(2), firstDerivative(4)]
#+end_src

#+RESULTS:
| 0.5555555555555556 | 0 | -3 | -3 | 0.5555555555555556 |

#+begin_src octave :session both :eval never-export :exports both
  function y = secondDerivative(x)
    den = (x-1)^3;
    y = 8 / den;
  end

  ans = [secondDerivative(-2), secondDerivative(-1), secondDerivative(0), secondDerivative(2), secondDerivative(3), secondDerivative(4) ]
#+end_src

#+RESULTS:
| -0.2962962962962963 | -1 | -8 | 8 | 1 | 0.2962962962962963 |

** Solution 8

#+begin_src gnuplot :exports both :file ../assets/c5_5s8.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "h(x)"
  set grid
  set key right top
  h(x) = sqrt(x)/(x+3)
  set xrange [-1:7]
  set yrange [0:0.35]
  set label "I" at 6.464101, h(6.464101) left point pointtype 7 pointsize 2 offset -2
  set label "C" at 3, h(3) left point pointtype 7 pointsize 2 offset -2
  plot (x > 0 ? h(x) : 1/0) ls 1 t "x^(1/2)/x+3", 0 ls 2 t "asymptote"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s8.png]]

#+begin_src octave :session both :eval never-export :exports both
  function y = firstDerivative(x)
    num = 3 - x
    den = 2 * sqrt(x) * (x+3)^2
    y = num / den;
  end

  ans = [firstDerivative(2), firstDerivative(3), firstDerivative(3 + (2*sqrt(3))), firstDerivative(7)]
#+end_src

#+RESULTS:
| 0.01414213562373095 | 0 | -0.007605849903976696 | -0.007559289460184544 |

#+begin_src octave :session both :eval never-export :exports both
  function y = secondDerivative(x)
    num = 3*(x * (x-6) - 3)
    den = 4*((x+3)^3)*(x^(1.5))
    y = num / den;
  end

  ans = [secondDerivative(2), secondDerivative(3), secondDerivative(7)]
#+end_src

#+RESULTS:
| -0.02333452377915607 | -0.008018753738744801 | 0.0001619847741468117 |

** Solution 9

#+begin_src gnuplot :exports both :file ../assets/c5_5s9.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (x+1)/sqrt(1-(x**2))
  set xrange [-1:1]
  set yrange [-1:6]
  set label "I" at -0.5, f(-0.5) left point pointtype 7 pointsize 2 offset -2
  plot f(x) ls 1 t "(x+1)/sqrt(1-x^2)"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s9.png]]

#+begin_src octave :session both :eval never-export :exports both
  function y = firstDerivative(x)
    num = 1
    den = (1-x)*sqrt(1-(x^2))
    y = num / den;
  end

  ans = [firstDerivative(0), firstDerivative(0.5), firstDerivative(-0.5), firstDerivative(-0.6)]
#+end_src

#+RESULTS:
| 1 | 2.309401076758503 | 0.769800358919501 | 0.7812499999999999 |

#+begin_src octave :session both :eval never-export :exports both
  function y = secondDerivative(x)
    num = (2*x + 1)*(1+x)
    den = (1 - (x^2))^(5/2)
    y = num / den;
  end

  ans = [secondDerivative(0), secondDerivative(-0.3), secondDerivative(-0.6), secondDerivative(0.5)]
#+end_src

#+RESULTS:
| 1 | 0.3544496489338692 | -0.2441406249999999 | 6.158402871356008 |

** Solution 10

#+begin_src gnuplot :exports both :file ../assets/c5_5s10.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "g(x)"
  set grid
  set key right top
  g(x) = (x+1)/sqrt((x**2) - 1)
  set xrange [-5:5]
  # set yrange [-1:6]
  plot (x < -1 ? g(x): 1/0) ls 1 t "(x+1)/sqrt(x^2 - 1)", (x > 1 ? g(x): 1/0) ls 1 t "", 1 ls 2 t "asymptote"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s10.png]]

Single differentiation:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
pkg load symbolic
syms x
g = (x+1)/sqrt(x^2 - 1)
ans = simplify(diff(g,x))
#+end_src

#+RESULTS:
#+begin_example

octave> g = (sym)

     x + 1
  ───────────
     ________
    ╱  2
  ╲╱  x  - 1
ans = (sym)

          -1
  ───────────────────
             ________
            ╱  2
  (x - 1)⋅╲╱  x  - 1
#+end_example

Double differentiation:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
pkg load symbolic
syms x
g = (x+1)/sqrt(x^2 - 1)
simplify(diff(g,x,x))
#+end_src

#+RESULTS:
#+begin_example

octave> g = (sym)

     x + 1
  ───────────
     ________
    ╱  2
  ╲╱  x  - 1
ans = (sym)

             2⋅x + 1
  ─────────────────────────────
     ________
    ╱  2      ⎛ 3    2        ⎞
  ╲╱  x  - 1 ⋅⎝x  - x  - x + 1⎠
#+end_example

Now let's find where $g'(x)$ and $g''(x)$ are $0$.

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
pkg load symbolic
syms x
g = (x+1)/sqrt(x^2 - 1)
solve(diff(g,x) == 0, x)
#+end_src

#+RESULTS:
:
: octave> g = (sym)
:
:      x + 1
:   ───────────
:      ________
:     ╱  2
:   ╲╱  x  - 1
: ans = {}(0x0)

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
pkg load symbolic
syms x
g = (x+1)/sqrt(x^2 - 1)
solve(diff(g,x, x) == 0, x)
#+end_src

#+RESULTS:
:
: octave> g = (sym)
:
:      x + 1
:   ───────────
:      ________
:     ╱  2
:   ╲╱  x  - 1
: ans = (sym) -1/2

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
pkg load symbolic
syms x
g = (x+1)/sqrt(x^2 - 1)
dg = simplify(diff(g,x))
dgh = function_handle(dg)
[dgh(-2), dgh(-0.5), dgh(0), dgh(2)]

ddg = simplify(diff(g,x,x))
ddgh = function_handle(ddg)
[ddgh(-2), ddgh(-0.5), ddgh(0), ddgh(1), ddgh(2)]
#+end_src

#+RESULTS:
#+begin_example

octave> g = (sym)

     x + 1
  ───────────
     ________
    ╱  2
  ╲╱  x  - 1
dg = (sym)

          -1
  ───────────────────
             ________
            ╱  2
  (x - 1)⋅╲╱  x  - 1
dgh =

@(x) -1 ./ ((x - 1) .* sqrt (x .^ 2 - 1))
ans =

 Columns 1 through 3:

   0.19245 + 0.00000i  -0.00000 - 0.76980i  -0.00000 - 1.00000i

 Column 4:

  -0.57735 + 0.00000i
octave> ddg = (sym)

             2⋅x + 1
  ─────────────────────────────
     ________
    ╱  2      ⎛ 3    2        ⎞
  ╲╱  x  - 1 ⋅⎝x  - x  - x + 1⎠
ddgh =

@(x) (2 * x + 1) ./ (sqrt (x .^ 2 - 1) .* (x .^ 3 - x .^ 2 - x + 1))
warning: division by zero
warning: called from
    eval>@<anonymous> at line 1 column 15
ans =

 Columns 1 through 3:

   0.19245 + 0.00000i   0.00000 + 0.00000i   0.00000 - 1.00000i

 Columns 4 and 5:

       Inf + 0.00000i   0.96225 + 0.00000i
#+end_example

** Solution 11

#+begin_src gnuplot :exports both :file ../assets/c5_5s11.png :eval never-export
  set terminal png notransparent nointerlace rounded font "Alegreya, 14"
  reset session
  set xlabel "x"
  set ylabel "f(x)"
  set grid
  set key right top
  f(x) = (x-5)*sqrt(x)/4
  set xrange [-0.5:9]
  set label "C" at (1.667), f(1.667) left point pointtype 7 pointsize 2 offset -2
  plot (x >= 0 ? f(x): 1/0) ls 1 t "(x-5)*sqrt(x)/4"
#+end_src

#+RESULTS:
[[file:../assets/c5_5s11.png]]

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
pkg load symbolic
syms x
f = ((x-5)*sqrt(x))/4
df = simplify(diff(f,x))
ddf = simplify(diff(f,x,x))
solve(diff(f,x) == 0, x)
solve(diff(f,x,x) == 0, x)

dfh = function_handle(df)
[dfh(1), dfh(5/3), dfh(2)]

ddfh = function_handle(ddf)
[ddfh(1), ddfh(5/3), ddfh(2)]
#+end_src

#+RESULTS:
#+begin_example

octave> f = (sym)

  √x⋅(x - 5)
  ──────────
      4
df = (sym)

  3⋅x - 5
  ───────
    8⋅√x
ddf = (sym)

  3⋅x + 5
  ───────
      3/2
  16⋅x
ans = (sym) 5/3
ans = (sym) -5/3
octave> dfh =

@(x) (3 * x - 5) ./ (8 * sqrt (x))
ans =

  -0.25000   0.00000   0.08839
octave> ddfh =

@(x) (3 * x + 5) ./ (16 * x .^ (3 / 2))
ans =

   0.50000   0.29047   0.24307
#+end_example

** Solution 12

  ## dfh = function_handle(df)
  ## [dfh(1), dfh(5/3), dfh(2)]

  ## ddfh = function_handle(ddf)
  ## [ddfh(1), ddfh(5/3), ddfh(2)]




#+begin_src octave :session :eval never-export :results value verbatim output :exports both
  pkg load symbolic
  syms x
  g = (((x-5)^2) *sqrt(x))/4
  df = simplify(diff(g,x))
  ddf = simplify(diff(g,x,x))

  solve(diff(g,x) == 0, x)
  solve(diff(g,x,x) ==0, x)
#+end_src

#+RESULTS:
#+begin_example

octave> g = (sym)

            2
  √x⋅(x - 5)
  ───────────
       4
df = (sym)

  5⋅(x - 5)⋅(x - 1)
  ─────────────────
         8⋅√x
ddf = (sym)

    ⎛   2          ⎞
  5⋅⎝3⋅x  - 6⋅x - 5⎠
  ──────────────────
           3/2
       16⋅x
octave> ans = (sym 2×1 matrix)

  ⎡1⎤
  ⎢ ⎥
  ⎣5⎦
ans = (sym 2×1 matrix)

  ⎡    2⋅√6⎤
  ⎢1 - ────⎥
  ⎢     3  ⎥
  ⎢        ⎥
  ⎢    2⋅√6⎥
  ⎢1 + ────⎥
  ⎣     3  ⎦
#+end_example
