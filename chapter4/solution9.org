* Antiderivatives

** Solution 1

$f(x) = 2x^3 - 9x^2 + 3x - 1$

Domain: $(-\infty, \infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = 2*x^3 - 9*x^2 + (3*x) - 1
#+end_src

#+RESULTS:
:
: octave> octave> f = (sym)
:
:      3      2
:   2⋅x  - 9⋅x  + 3⋅x - 1

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
int(f, x)
#+end_src

#+RESULTS:
: ans = (sym)
:
:    4             2
:   x       3   3⋅x
:   ── - 3⋅x  + ──── - x
:   2            2


So the antiderivative is $\dfrac{x^4}{2} - 3*x^3 + \dfrac{3x^2}{2} -
2$ on the interval $(-\infty, \infty)$.

** Solution 2

$g(x) = \sqrt{x} + \sqrt[3]{x}$

Domain: $(0, \infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
g = sqrt(x) + (x)^(1/3)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
g = (sym)

  3 ___
  ╲╱ x  + √x
#+end_example

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
int(g,x)
#+end_src

#+RESULTS:
: ans = (sym)
:
:      4/3      3/2
:   3⋅x      2⋅x
:   ────── + ──────
:     4        3

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 3

$f(x) = \sin x + \cos x$

Domain: $(-\infty, \infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = sin(x) + cos(x)
int(f,x)
#+end_src

#+RESULTS:
:
: octave> octave> f = (sym) sin(x) + cos(x)
: ans = (sym) sin(x) - cos(x)

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 4

$g(x) = \sec x(\sec x + \tan x)$

Let's find the domain of the above function.

We know than $\sec x = \dfrac{1}{\cos x}$ and $\tan x = \dfrac{\sin x}{\cos x}$

So, $g(x) = \sec^2 x + \sin x \sec^2 x$

We know the domain of $\sin x$ is $(-\infty, \infty)$. But domain of
$\sec x$ is $R - \dfrac{\pi}{2} - n*\pi$

So the domain of the function $g(x)$ is $R - \dfrac{\pi}{2} - n*\pi$.

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
g = sec(x)*(sec(x) + tan(x))
int(g,x)
#+end_src

#+RESULTS:
:
: octave> octave> g = (sym) (tan(x) + sec(x))⋅sec(x)
: ans = (sym) tan(x) + sec(x)

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 5

$f(x) = x^2 + \dfrac{1}{x^2}$

Domain: $(-\infty, 0) \cup (0,\infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = x^2 + (1/x^2)
int(f,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> f = (sym)

   2   1
  x  + ──
        2
       x
ans = (sym)

   3
  x    1
  ── - ─
  3    x
#+end_example

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 6

$g(x) = \dfrac{x^3 + 3}{x^2}$

Domain: $(-\infty, 0) \cup (0,\infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
g = (x^3 + 3)/(x^2)
int(g,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> g = (sym)

   3
  x  + 3
  ──────
     2
    x
ans = (sym)

   2
  x    3
  ── - ─
  2    x
#+end_example

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 7

$f(x) = (x^3 + 3)^2$

Domain: $(-\infty, \infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = (x^3 + 3)^2
int(f,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> f = (sym)

          2
  ⎛ 3    ⎞
  ⎝x  + 3⎠
ans = (sym)

   7      4
  x    3⋅x
  ── + ──── + 9⋅x
  7     2
#+end_example

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 8

$g(x) = (\dfrac{x^3 + 3}{x})^2$

Domain: $(-\infty, 0) \cup (0, \infty)$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
g = ((x^3 +3)/x)^2
int(g,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> g = (sym)

          2
  ⎛ 3    ⎞
  ⎝x  + 3⎠
  ─────────
       2
      x
ans = (sym)

   5
  x       2   9
  ── + 3⋅x  - ─
  5           x
#+end_example

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 9

$f(x) = sqrt(2x+3)$

Let's find it's domain:

$2x + 3 \geq 0$

$x \geq \dfrac{-3}{2}$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = sqrt(2*x + 3)
int(f,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> f = (sym)

    _________
  ╲╱ 2⋅x + 3
ans = (sym)

           3/2
  (2⋅x + 3)
  ────────────
       3
#+end_example

Intervals where the antiderivaties apply is same as the original
function's domain.

** Solution 10

$f'(x) = 4x - 3$

$f(1) = 4$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
fd(x) = 4*x - 3
int(fd, x)
#+end_src

#+RESULTS:
:
: octave> octave> fd(x) = (symfun) 4⋅x - 3
: ans(x) = (symfun)
:
:      2
:   2⋅x  - 3⋅x

So the antiderivate is $2x^2 - 3x + C = F(x)$

Now let's find the function,

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
syms c
f = 2*x^2 - 3*x + c
f_h = function_handle(f)
solve(f_h(c, 1) == 4, c)
#+end_src

#+RESULTS:
:
: f = (sym)
:
:          2
:   c + 2⋅x  - 3⋅x
: f_h =
:
: @(c, x) c + 2 * x .^ 2 - 3 * x
: ans = (sym) 5

So the function is $2x^2 - 3x + 5$

** Solution 11

$g'(x) = \sqrt(x) + \sin x$

$g(0) = 1$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
gd(x) = sqrt(x) + sin(x)
int(gd, x)
#+end_src

#+RESULTS:
:
: octave> octave> gd(x) = (symfun) √x + sin(x)
: ans(x) = (symfun)
:
:      3/2
:   2⋅x
:   ────── - cos(x)
:     3

So the antiderivative is $\dfrac{2*x^{3/2}}{3} - \cos x + c = F(x)$

Now let's find this function,

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
syms c
f = 2*(x)^(3/2)/3 - cos(x) + c
f_h = function_handle(f)
solve(f_h(c, 0) == 1, c)
#+end_src

#+RESULTS:
#+begin_example

warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
f = (sym)

         3/2
      2⋅x
  c + ────── - cos(x)
        3
f_h =

@(c, x) c + 2 * x .^ (3 / 2) / 3 - cos (x)
ans = (sym) 2
#+end_example

So the function is $\dfrac{2*x^{3/2}}{3} - \cos x + 2 = f(x)$

** Solution 12

$f'(x) = \dfrac{1}{\sqrt{x}} + \sec x \tan x$

$\lim_{x \to 0^+} f(x) = 2$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
fd(x) = (1/sqrt(x) + sec(x)*tan(x))
int(fd, x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> fd(x) = (symfun)

                  1
  tan(x)⋅sec(x) + ──
                  √x
ans(x) = (symfun)

           1
  2⋅√x + ──────
         cos(x)
#+end_example

So the antiderivative is $2\sqrt{x} + \dfrac{1}{\cos x} + c = F(x)$

Now let's find this function,

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
syms c
f = 2*(x)^(1/2) + (1/cos(x)) + c
f_h = function_handle(f)
solve(f_h(c,0) == 2)
#+end_src

#+RESULTS:
#+begin_example

warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
f = (sym)

               1
  c + 2⋅√x + ──────
             cos(x)
f_h =

@(c, x) c + 2 * sqrt (x) + 1 ./ cos (x)
ans = (sym) 1
#+end_example

So the function is $2\sqrt{x} + \dfrac{1}{\cos x} + 1 = f(x)$

** Solution 13

$g'(x) = x^2 \sqrt[3]{x}$

$g(1) = 2$

Let's solve this using GNU Octave:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
gd(x) = x^2 * x^(1/3)
int(gd, x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
gd(x) = (symfun)

   7/3
  x
ans(x) = (symfun)

     10/3
  3⋅x
  ───────
     10
#+end_example

So the antiderivative is $\dfrac{3*x^(10/3)}{10} + c = G(x)$

Now let's find this function,

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
syms c
g = 3*(x^(10/3))/10 + c
g_h = function_handle(g)
solve(g_h(c, 1) == 2)
#+end_src

#+RESULTS:
#+begin_example

warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
g = (sym)

         10/3
      3⋅x
  c + ───────
         10
g_h =

@(c, x) c + 3 * x .^ (10 / 3) / 10
warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    plus at line 61 column 5
    eval>@<anonymous> at line 1 column 10
ans = (sym)

  17
  ──
  10
#+end_example

So the function is $\dfrac{3*x^(10/3)}{10} + \dfrac{17}{10} = G(x)$

** Solution 15

At $t=0$, we are starting to apply brake. It's also $h - 0$ and $a = -10ft/s^2$

$h$ is the distance car travelled.

At $t=t_1$, the car comes to stop.

$h = 125$ feet

$f''(t) = a = -10$

$f'(t) = -10t + c$

We need to find $f'(t)$ at $t = 0$

$h = f(t) = -5*t^2 + c*t + d$

At $t=0, h=0$

$h = f(0) = d$

So, $d = 0$

At $t=t_1$, $h = 125$

$h = f(t_1) = -5t_1^2 + ct_1$

$125 = -5t_1^2 + ct_1$

Velocity at $t_1 = 0$

$f'(t_1) = -10t_1 + c = 0$

$c = 10*t_1$

So, $125 = -5*t_1^2 + 10*t_1^2$

$5*t_1^2 = 125$

$t_1^2 = 25$

$t_1 = 5$

So velocity at $t=0$:

$f'(0) = c = 10t_1 = 10.5 = 50$ feet/s

** Solution 16

At $t=0$, he applies brakes.

At $t=2$, he travels 100 feets.

At t=0,

$f''(t) = a = -10$ feet/s^2

$f'(t) = -10t + c$

$f(t) = -5t^2 + ct + d$

We know that $f(2) = 100$

We need to find $f'(t)$ at $t = 0$

We also know that $f(0) = 0$

So, $f(0) = d = 0$

So, $d = 0$

$f(2) = 100$

$-5.2^2 + c.2 + 0 = 100$

$-20 + 2c = 100$

$2c - 120$

$c - 60$

$f'(t) = -10t + c$

$f'(0) = c = 60$

So he was going at 60 feet/s when he applied the brakes.

** Solution 17

Initial velocity = 10m/s

Broom acceleration = $4 m/sec^2$

Snitch distance = 100 m

Wwe need to find the time to reach snitch

$a = f''(t) = 4$

$f'(t) = 4t + c$

We know that $f'(0) = 10$

$c = 10$

$f'(t) = 4t + 10$

$f(t) = 2t^2 + 10t + d$

We need to find some $t$ such that $f(t) = 100$

We know that at $t = 0$, $f(0) = 0$ and $t = t$, $f(t) = 100$

From $f(0) = 0$, we can conclude that $d = 0$

$f(t) = 100$

$2t^2 + 10t = 100$

$t^2 + 5t = 50$

$t^2 + 5t - 50 - 0$

So at $t = 5$ seconds, harry will reach the snitch.

** Solution 18

Tank capacity $= 500$ Gallon

Water started leaking at noon

At $t$ minutes after noon, water started leaking at $5 + 2t$ gallons
per miniutes.

$f(t) = 5 + 2t$

We need to find at what $t$, $f(t)$ becomes $500$.

$5 + 2t = 500$

$2t = 495$

$t = 247.5$

At $247.5$ minutes after noon, the tank becomes empty.
