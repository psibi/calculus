* Solution 1

$\lim_{x \to 1} \dfrac{x^4 - 1}{x^5 - 1}$

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = (x^4 - 1)
df = diff(f, x)
g = x^5 - 1
dg = diff(g,x)
res = simplify(df / dg)

res_h = function_handle(res)
rats(res_h(1))
#+end_src

#+RESULTS:
#+begin_example

octave> octave> f = (sym)

   4
  x  - 1
df = (sym)

     3
  4⋅x
g = (sym)

   5
  x  - 1
dg = (sym)

     4
  5⋅x
res = (sym)

   4
  ───
  5⋅x
octave> res_h =

@(x) 4 ./ (5 * x)
ans =       4/5
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{x \to 1}
\dfrac{x^4 - 1}{x^5 - 1} = \dfrac{4}{5}$

We can also use GNU Octave to verify our limits:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
syms x
L = limit((x^4 - 1)/(x^5 - 1), x, 1)
#+end_src

#+RESULTS:
:
: octave> L = (sym) 4/5

* Solution 2

$\lim_{x \to 1} \dfrac{\sqrt[4]{x} - 1}{\sqrt[5]{x} - 1}$

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = (x^(1/4) - 1)
df = diff(f, x)

g = x^(1/5) - 1
dg = diff(g,x)

res = simplify(df / dg)

res_h = function_handle(res)
rats(res_h(1))
#+end_src

#+RESULTS:
#+begin_example

octave> octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
f = (sym)

  4 ___
  ╲╱ x  - 1
df = (sym)

    1
  ──────
     3/4
  4⋅x
octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
g = (sym)

  5 ___
  ╲╱ x  - 1
dg = (sym)

    1
  ──────
     4/5
  5⋅x
octave> res = (sym)

    20___
  5⋅╲╱ x
  ───────
     4
octave> res_h =

@(x) 5 * x .^ (1 / 20) / 4
ans =       5/4
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{x \to 1}
\dfrac{\sqrt[4]{x} - 1}{\sqrt[5]{x} - 1} = \dfrac{5}{4}$

We can also use GNU Octave to verify our limits:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
syms x
L = limit((x^(1/4) - 1)/(x^(1/5) - 1), x, 1)
#+end_src

#+RESULTS:
#+begin_example

octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
L = (sym) 5/4
#+end_example

* Solution 3

$\lim_{u \to 4} \dfrac{u^{3/2}-8}{\sqrt{u}-2}$

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms u

f = u^(3/2) - 8
df = diff(f,u)

g = u^(1/2)-2
dg = diff(g,u)

res = simplify(df/dg)

res_h = function_handle(res)
res_h(4)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
f = (sym)

   3/2
  u    - 8
df = (sym)

  3⋅√u
  ────
   2
octave> warning: passing floating-point values to sym is dangerous, see "help sym"
warning: called from
    double_to_sym_heuristic at line 50 column 7
    sym at line 379 column 13
    mpower at line 76 column 5
g = (sym) √u - 2
dg = (sym)

   1
  ────
  2⋅√u
octave> res = (sym) 3⋅u
octave> res_h =

@(u) 3 * u
ans =  12
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{u \to 4}
\dfrac{u^{3/2}-8}{\sqrt{u}-2} = 12$.

* Solution 4

$\lim_{x \to 1} \dfrac{x^8 + 3x^6 - 5x^2 + 1}{x^7 + 4x^5 - 3x^3 - 2}$

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = x^8 + (3*x^6) - (5*x^2) + 1
fh = function_handle(f)
fh(1)

g = x^7 + (4*x^5) - (3*x^3) - 2
gh = function_handle(g)
gh(1)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> octave> f = (sym)

   8      6      2
  x  + 3⋅x  - 5⋅x  + 1
fh =

@(x) x .^ 8 + 3 * x .^ 6 - 5 * x .^ 2 + 1
ans = 0
octave> g = (sym)

   7      5      3
  x  + 4⋅x  - 3⋅x  - 2
gh =

@(x) x .^ 7 + 4 * x .^ 5 - 3 * x .^ 3 - 2
ans = 0
#+end_example

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df = diff(f, x)
dg = diff(g, x)

res = simplify(df/dg)
res_h = function_handle(res)
rats(res_h(1))
#+end_src

#+RESULTS:
#+begin_example
df = (sym)

     7       5
  8⋅x  + 18⋅x  - 10⋅x
dg = (sym)

     6       4      2
  7⋅x  + 20⋅x  - 9⋅x
octave> res = (sym)

    ⎛   6      4    ⎞
  2⋅⎝4⋅x  + 9⋅x  - 5⎠
  ────────────────────
    ⎛   4       2    ⎞
  x⋅⎝7⋅x  + 20⋅x  - 9⎠
res_h =

@(x) 2 * (4 * x .^ 6 + 9 * x .^ 4 - 5) ./ (x .* (7 * x .^ 4 + 20 * x .^ 2 - 9))
ans =       8/9
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{x \to 1}
\dfrac{x^8 + 3x^6 - 5x^2 + 1}{x^7 + 4x^5 - 3x^3 - 2} = \dfrac{8}{9}$

We can also use GNU Octave to verify our limits:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
L = limit(f/g, x, 1)
#+end_src

#+RESULTS:
: L = (sym) 8/9

* Solution 5

$\lim_{x \to 1} \dfrac{x^8 + x^6 - 7x^2 + 5}{x^8 + 2x^5 - 9x^2 + 6}$

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = x^8 + x^6 - (7*x^2) + 5
fh = function_handle(f)
fh(1)

g = x^8 + (2*x^5) - (9*x^2) + 6
gh = function_handle(g)
gh(1)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> octave> f = (sym)

   8    6      2
  x  + x  - 7⋅x  + 5
fh =

@(x) x .^ 8 + x .^ 6 - 7 * x .^ 2 + 5
ans = 0
octave> g = (sym)

   8      5      2
  x  + 2⋅x  - 9⋅x  + 6
gh =

@(x) x .^ 8 + 2 * x .^ 5 - 9 * x .^ 2 + 6
ans = 0
#+end_example

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df = diff(f, x)
dg = diff(g, x)

res = simplify(df/dg)
res_h = function_handle(res)

res_h(1)
#+end_src

#+RESULTS:
#+begin_example
df = (sym)

     7      5
  8⋅x  + 6⋅x  - 14⋅x
dg = (sym)

     7       4
  8⋅x  + 10⋅x  - 18⋅x
octave> res = (sym)

     6      4
  4⋅x  + 3⋅x  - 7
  ───────────────
     6      3
  4⋅x  + 5⋅x  - 9
res_h =

@(x) (4 * x .^ 6 + 3 * x .^ 4 - 7) ./ (4 * x .^ 6 + 5 * x .^ 3 - 9)
octave> warning: division by zero
warning: called from
    eval>@<anonymous> at line 1 column 27
ans = NaN
#+end_example

Okay, that gives a division by error. Let's check $df$ and $dg$
individually

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df_h = function_handle(df)
df_h(1)

dg_h = function_handle(dg)
dg_h(1)
#+end_src

#+RESULTS:
: df_h =
:
: @(x) 8 * x .^ 7 + 6 * x .^ 5 - 14 * x
: ans = 0
: octave> dg_h =
:
: @(x) 8 * x .^ 7 + 10 * x .^ 4 - 18 * x
: ans = 0

Let's try applying L'Hopital's rule on it.

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
dff = diff(df, x)
dgg = diff(dg, x)

res = simplify(dff/dgg)
res_h = function_handle(res)
rats(res_h(1))
#+end_src

#+RESULTS:
#+begin_example
dff = (sym)

      6       4
  56⋅x  + 30⋅x  - 14
dgg = (sym)

      6       3
  56⋅x  + 40⋅x  - 18
octave> res = (sym)

      6       4
  28⋅x  + 15⋅x  - 7
  ─────────────────
      6       3
  28⋅x  + 20⋅x  - 9
res_h =

@(x) (28 * x .^ 6 + 15 * x .^ 4 - 7) ./ (28 * x .^ 6 + 20 * x .^ 3 - 9)
ans =     12/13
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{x \to 1}
\dfrac{x^8 + x^6 - 7x^2 + 5}{x^8 + 2x^5 - 9x^2 + 6} = \dfrac{12}{13}$

* Solution 6

$\lim_{x \to \pi/2} \dfrac{cos (x + \pi)}{2x - \pi}$

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = cos(x + pi)
g = 2*x - pi
#+end_src

#+RESULTS:
:
: octave> octave> octave> f = (sym) -cos(x)
: g = (sym) 2⋅x - π

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df = diff(f,x)
dg = diff(g,x)

res = simplify(df/dg)
res_h = function_handle(res)
rats(res_h(pi / 2))
#+end_src

#+RESULTS:
#+begin_example
df = (sym) sin(x)
dg = (sym) 2
octave> res = (sym)

  sin(x)
  ──────
    2
res_h =

@(x) sin (x) / 2
ans =       1/2
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{x \to \pi/2}
\dfrac{cos (x + \pi)}{2x - \pi} = \dfrac{1}{2}$

We can also use GNU Octave to verify our limits:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
L = limit(f/g, x, pi/2)
#+end_src

#+RESULTS:
: warning: passing floating-point values to sym is dangerous, see "help sym"
: warning: called from
:     double_to_sym_heuristic at line 50 column 7
:     sym at line 379 column 13
:     limit at line 92 column 5
: L = (sym) 1/2

* Solution 7

$\lim_{x \to 2} \dfrac{\cos (\pi / x)}{x-2}$

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = cos(pi / x)
g = x - 2
#+end_src

#+RESULTS:
:
: octave> octave> octave> f = (sym)
:
:      ⎛π⎞
:   cos⎜─⎟
:      ⎝x⎠
: g = (sym) x - 2


The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df = diff(f,x)
dg = diff(g,x)

res = simplify(df/dg)
res_h = function_handle(res)
res_h(2)
#+end_src

#+RESULTS:
#+begin_example
df = (sym)

       ⎛π⎞
  π⋅sin⎜─⎟
       ⎝x⎠
  ────────
      2
     x
dg = (sym) 1
octave> res = (sym)

       ⎛π⎞
  π⋅sin⎜─⎟
       ⎝x⎠
  ────────
      2
     x
res_h =

@(x) pi * sin (pi ./ x) ./ x .^ 2
ans =  0.78540
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{x \to 2}
\dfrac{\cos (\pi / x)}{x-2} = 0.78540$

* Solution 8

$\lim_{t \to 1} \dfrac{\sqrt{t+3}-2}{\sqrt{t+8}-3}$

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms t

f = sqrt(t + 3) - 2
g = sqrt(t+8) - 3
#+end_src

#+RESULTS:
:
: octave> octave> octave> f = (sym)
:
:     _______
:   ╲╱ t + 3  - 2
: g = (sym)
:
:     _______
:   ╲╱ t + 8  - 3

The above limit approaches $0/0$, so we can probably apply L'Hopital's
rule to compute the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df = diff(f,t)
dg = diff(g,t)

res = simplify(df/dg)
res_h = function_handle(res)
rats(res_h(1))
#+end_src

#+RESULTS:
#+begin_example
df = (sym)

       1
  ───────────
      _______
  2⋅╲╱ t + 3
dg = (sym)

       1
  ───────────
      _______
  2⋅╲╱ t + 8
octave> res = (sym)

    _______
  ╲╱ t + 8
  ─────────
    _______
  ╲╱ t + 3
res_h =

@(t) sqrt (t + 8) ./ sqrt (t + 3)
ans =       3/2
#+end_example

So from L'Hopital's rule, we can conclude that $\lim_{t \to 1}
\dfrac{\sqrt{t+3}-2}{\sqrt{t+8}-3} = \dfrac{3}{2}$

* Solution 9

$\lim_{\theta \to 0} (\tan(3\theta)\cot(4\theta))$

We know that $\cot (4\theta) = \dfrac{1}{\tan(4\theta)}$. So the above
limit approaches $0/0$, so we can probably apply L'Hopital's rule to
compute the limits.

$\tan(3\theta)\cot(4\theta) = \dfrac{\tan (3\theta)}{\tan(4\theta)} = \dfrac{\sin (3\theta)}{\sin (4\theta)} \dfrac{\cos (4\theta)}{\cos (3\theta)}$

$\lim_{\theta \to 0} \dfrac{\sin (3\theta)}{\sin (4\theta)} \dfrac{\cos (4\theta)}{\cos (3\theta)}$

$= \lim_{\theta \to 0} \dfrac{\sin (3\theta)}{\sin (4\theta)} \lim_{\theta \to 0} \dfrac{\cos (4\theta)}{\cos (3\theta)}$

$= \lim_{\theta \to 0} \dfrac{\sin (3\theta)}{\sin (4\theta)}$

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = sin(3*x)
g = sin(4*x)

df = diff(f, x)
dg = diff(g,x)
#+end_src

#+RESULTS:
:
: octave> octave> octave> f = (sym) sin(3⋅x)
: g = (sym) sin(4⋅x)
: octave> df = (sym) 3⋅cos(3⋅x)
: dg = (sym) 4⋅cos(4⋅x)

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
res = simplify(df/dg)
res_h = function_handle(res)
rats(res_h(0))
#+end_src

#+RESULTS:
: res = (sym)
:
:   3⋅cos(3⋅x)
:   ──────────
:   4⋅cos(4⋅x)
: res_h =
:
: @(x) 3 * cos (3 * x) ./ (4 * cos (4 * x))
: ans =       3/4

So from L'Hopital's rule, we can conclude that $\lim_{\theta \to 0} (\tan(3\theta)\cot(4\theta)) = \dfrac{3}{4}$

* Solution 10

$\lim_{t \to 0} \dfrac{\sec t - 1}{t^2}$

We know that $\sec (0) = 1$. So the above limit approaches $0/0$, so
we can probably apply L'Hopital's rule to compute the limits.

Let's write some GNU Octave code to solve this further:
#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms t
f = sec(t) - 1
g = t^2

df = diff(f, t)
dg = diff(g, t)
#+end_src

#+RESULTS:
:
: octave> octave> f = (sym) sec(t) - 1
: g = (sym)
:
:    2
:   t
: octave> df = (sym) tan(t)⋅sec(t)
: dg = (sym) 2⋅t

Even the above $\dfrac{df}{dg}$ limit approaches to $0/0$. Let's apply
L'Hospital's rule again:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
ddf = diff(df, t)
ddg = diff(dg, t)
#+end_src

#+RESULTS:
: ddf = (sym)
:
:   ⎛   2       ⎞             2
:   ⎝tan (t) + 1⎠⋅sec(t) + tan (t)⋅sec(t)
: ddg = (sym) 2

With the above result, the denominator is constant. Let's find out the
limit of the numerator:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
ddf_h = function_handle(ddf)
ddf_h(0)
#+end_src

#+RESULTS:
: ddf_h =
:
: @(t) (tan (t) .^ 2 + 1) .* sec (t) + tan (t) .^ 2 .* sec (t)
: ans =  1

Combining it with the denomintor the limit is $\dfrac{1}{2}$. Let's
verify using GNU octave if our solution is right:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
L = limit(f/g, t, 0)
#+end_src

#+RESULTS:
: L = (sym) 1/2

* Solution 11

$\lim_{x \to 0} \dfrac{x - \sin x}{x^3}$

We know that $\sin x = 0$. So the above limit approaches $0/0$, so we
can probably apply L'Hopital's rule to compute the limits.

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = x - sin(x)
g = x^3

df = diff(f, x)
dg = diff(g, x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> f = (sym) x - sin(x)
g = (sym)

   3
  x
octave> df = (sym) 1 - cos(x)
dg = (sym)

     2
  3⋅x
#+end_example

Even the above $\dfrac{df}{dg}$ limit approaches to $0/0$. Let's apply
L'Hospital's rule again:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
ddf = diff(df, x)
ddg = diff(dg, x)
#+end_src

#+RESULTS:
: ddf = (sym) sin(x)
: ddg = (sym) 6⋅x

Even the above $\dfrac{ddf}{ddg}$ limit approaches to $0/0$. Let's apply
L'Hospital's rule again:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
dddf = diff(ddf, x)
dddg = diff(ddg, x)
#+end_src

#+RESULTS:
: dddf = (sym) cos(x)
: dddg = (sym) 6

Combining it, the limit is $\dfrac{1}{6}$

* Solution 12

$\lim_{x \to 0} \dfrac{\tan x - x}{x^3}$

We know that $\tan 0 = 0$. So the above limit approaches $0/0$, so we
can probably apply L'Hopital's rule to compute the limits.

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x
f = tan(x) - x
g = x^3

df = diff(f, x)
dg = diff(g, x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> f = (sym) -x + tan(x)
g = (sym)

   3
  x
octave> df = (sym)

     2
  tan (x)
dg = (sym)

     2
  3⋅x
#+end_example

Even the above $\dfrac{df}{dg}$ limit approaches to $0/0$. Let's apply
L'Hospital's rule again:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
ddf = diff(df, x)
ddg = diff(dg, x)
#+end_src

#+RESULTS:
: ddf = (sym)
:
:   ⎛     2       ⎞
:   ⎝2⋅tan (x) + 2⎠⋅tan(x)
: ddg = (sym) 6⋅x

Even the above $\dfrac{ddf}{ddg}$ limit approaches to $0/0$. Let's apply
L'Hospital's rule again:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
dddf = diff(ddf, x)
dddg = diff(ddg, x)

dddf_h = function_handle(dddf)
dddf_h(0)
#+end_src

#+RESULTS:
: dddf = (sym)
:
:   ⎛   2       ⎞ ⎛     2       ⎞     ⎛     2       ⎞    2
:   ⎝tan (x) + 1⎠⋅⎝2⋅tan (x) + 2⎠ + 2⋅⎝2⋅tan (x) + 2⎠⋅tan (x)
: dddg = (sym) 6
: octave> dddf_h =
:
: @(x) (tan (x) .^ 2 + 1) .* (2 * tan (x) .^ 2 + 2) + 2 * (2 * tan (x) .^ 2 + 2) .* tan (x) .^ 2
: ans =  2

Combining it with the denominator, the limit is $\dfrac{2}{6} =
\dfrac{1}{3}$. Let's verify using GNU octave if our solution is
right:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
L = limit(f/g, x, 0)
#+end_src

#+RESULTS:
: L = (sym) 1/3

* Solution 13

$\lim_{x \to \dfrac{\pi^-}{2}} \dfrac{\tan x}{\cot (2x)}$

We know that $\tan \dfrac{\pi}{2} = \infty$

We know that $\tan \dfrac{2 * \pi}{2} = \tan \pi = 0$

So, $\lim_{x \to \dfrac{\pi^-}{2}} \dfrac{\tan (2*x)}{\cot (x)}$
approaches $0/0$, so we can probably apply L'Hopital's rule to compute
the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = tan (2*x)
g = cot (x)

df = diff(f,x)
dg = diff(g,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> octave> f = (sym) tan(2⋅x)
g = (sym) cot(x)
octave> df = (sym)

       2
  2⋅tan (2⋅x) + 2
dg = (sym)

       2
  - cot (x) - 1
#+end_example

That seems promising because of the constants, Let's apply the limits:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
df_h = function_handle(df)
dg_h = function_handle(dg)

df_h((pi/2))
dg_h((pi/2))
#+end_src

#+RESULTS:
: df_h =
:
: @(x) 2 * tan (2 * x) .^ 2 + 2
: dg_h =
:
: @(x) -cot (x) .^ 2 - 1
: octave> ans =  2
: ans = -1

Combining both, the limit is $-2$.

* Solution 14

$\lim_{x \to -\infty} \dfrac{\csc (1/x)}{x^2}$

We know that $\csc (1/x) = \dfrac{1}{\sin (1/x)}$

We know that $\lim_{x \to -\infty} \dfrac{1}{\sin (1/x)} = \infty$

So, $\lim_{x \to -\infty} \dfrac{\csc (1/x)}{x^2}$ approaches
\dfrac{\infty}{\infty}$, so we can apply L'Hopital's rule to compute
the limits.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = 1/x^2
g = sin(1/x)

df = diff(f,x)
dg = diff(g,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> octave> f = (sym)

  1
  ──
   2
  x
g = (sym)

     ⎛1⎞
  sin⎜─⎟
     ⎝x⎠
octave> df = (sym)

  -2
  ───
    3
   x
dg = (sym)

      ⎛1⎞
  -cos⎜─⎟
      ⎝x⎠
  ────────
      2
     x
#+end_example

Solving further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
res = simplify(df / dg, x)
res_h = function_handle(res)

res_h(Inf)
#+end_src

#+RESULTS:
#+begin_example
res = (sym)

     2
  ────────
       ⎛1⎞
  x⋅cos⎜─⎟
       ⎝x⎠
res_h =

@(x) 2 ./ (x .* cos (1 ./ x))
octave> ans = 0
#+end_example

So the limit is $0$.

* Solution 15

$\lim_{x \to 0} x \tan(x+ \pi / 2)$

We know that $\tan (x + \pi/2) = -cot(x)$. So, $\lim_{x \to 0}
\dfrac{x * \cos(x)}{\sin(x)}$ approaches $\dfrac{0}{0}$. So
we can apply L'Hopital's rule on it.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = (-x)*cos(x)
g = sin(x)

df = diff(f,x)
dg = diff(g,x)
#+end_src

#+RESULTS:
:
: octave> octave> octave> f = (sym) -x⋅cos(x)
: g = (sym) sin(x)
: octave> df = (sym) x⋅sin(x) - cos(x)
: dg = (sym) cos(x)

Let's compute further,

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
res = df/dg
res_h = function_handle(res)

res_h(0)
#+end_src

#+RESULTS:
: res = (sym)
:
:   x⋅sin(x) - cos(x)
:   ─────────────────
:         cos(x)
: res_h =
:
: @(x) (x .* sin (x) - cos (x)) ./ cos (x)
: octave> ans = -1

So $\lim_{x \to 0} x \tan(x+ \pi / 2) = -1$

* Solution 16

$\lim_{x \to \infty} x * \cos(\dfrac{x\pi + 2}{2x + \pi})$

$\dfrac{\pi * x + 2}{2x + \pi} = \dfrac{x(\pi + 2/x)}{x(2 + \pi/x)}$

$= \dfrac{\pi + 2/x}{2 + \pi/x}$

$\lim_{x \to \infty} \cos \dfrac{\pi + 2/x}{2 + \pi/x} = 0$

So, $\lim_{x \to \infty} x * \cos(\dfrac{x\pi + 2}{2x + \pi})$
approaches $\dfrac{0}{0}$. We can apply L'Hopital's rule.

Let's write some GNU Octave code to solve this further:

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
clear
pkg load symbolic
syms x

f = cos((pi *x + 2)/(2*x + pi))
g = 1/x

df = diff(f,x)
dg = diff(g,x)
#+end_src

#+RESULTS:
#+begin_example

octave> octave> octave> f = (sym)

     ⎛π⋅x + 2⎞
  cos⎜───────⎟
     ⎝2⋅x + π⎠
g = (sym)

  1
  ─
  x
octave> df = (sym)

   ⎛   π      2⋅(π⋅x + 2)⎞    ⎛π⋅x + 2⎞
  -⎜─────── - ───────────⎟⋅sin⎜───────⎟
   ⎜2⋅x + π             2⎟    ⎝2⋅x + π⎠
   ⎝           (2⋅x + π) ⎠
dg = (sym)

  -1
  ───
    2
   x
#+end_example

Let's compute further,

#+begin_src octave :session :eval never-export :results value verbatim output :exports both
res = simplify(df / dg)
#+end_src

#+RESULTS:
: res = (sym)
:
:    2 ⎛      2⎞    ⎛π⋅x + 2⎞
:   x ⋅⎝-4 + π ⎠⋅sin⎜───────⎟
:                   ⎝2⋅x + π⎠
:   ─────────────────────────
:          2            2
:       4⋅x  + 4⋅π⋅x + π

We know from our earlier result that,

$\lim_{x \to \infty} \sin \dfrac{\pi + 2/x}{2 + \pi/x} = \sin (\dfrac{\pi}{2}) = 1$

Computing other parts,

$\dfrac{(-4 + \pi^2)}{4 + \dfrac{4\pi}{x} + \dfrac{\pi^2}{x^2}}$

$= \dfrac{-4 + \pi^2}{4}$

* Solution 17

Suppose $\lim_{x \to \infty} f(x) = \lim_{x \to \infty} g(x) = 0$

Suppose $\lim_{x \to \infty} \dfrac{f'(x)}{g'(x)} = L$

$\lim_{t \to 0^+} \dfrac{f(1/t)}{g(1/t)}$

We know that as $t \to 0^+$, $\dfrac{1}{t} \to \infty$

So, $\dfrac{f'(1/t)}{g'(1/t)} \to \dfrac{0}{0}$

Applying L'Hopital's rule:

$\lim_{t \to 0^+} \dfrac{f'(1/t)}{g'(1/t)}$

We know that, $\lim_{t \to \infty} \dfrac{f'(x)}{g'(x)} = L$

Since $\dfrac{1}{t} \to \infty$, So, $\lim_{t \to 0^+} \dfrac{f'(1/t)}{g'(1/t)} = L$

Let $t = \dfrac{1}{x}$

As $t \to 0^+, x \to \infty$

As $t \to 0^+, 1/t \to \infty$

So, $\lim_{x \to \infty} \dfrac{f(x)}{g(x)} = L$

* Solution 18

[[https://math.stackexchange.com/questions/147356/proof-of-the-lh%C3%B4pital-rule-for-frac-infty-infty][Solution here]]

* Solution 19

$\lim_{x \to -\infty} \dfrac{\sqrt{x^2 + 1}}{x}$

$\lim_{x \to -\infty} \dfrac{\sqrt{x^2(1 + 1/x^2)}}{x}$

$\lim_{x \to -\infty} \dfrac{-x\sqrt{(1 + 1/x^2)}}{x}$

$\lim_{x \to -\infty} -\sqrt(1 + \dfrac{1}{x^2})$

$= -\sqrt{1} = -1$

* Solution 20

$\lim_{x \to 0} \dfrac{\sin(1/x) + 2x\cos(1/x)}{\cos x}$

Suppose $\lim_{x \to 0} \sin(1/x)$ is equal to L.

Let $v = \dfrac{1}{x}$

So, $\lim_{v \to \infty} \sin 0$ is not defined since it alternates
between 1 and -1.

* Solution 21

$\lim_{x \to \infty} \dfrac{x - \sin x \cos x}{2x - x\cos x + \sin x - 2\sin x \cos x}$

$\lim_{x \to \infty} \sin x \cos x$ oscillates between -1 and 1 and
hence it's not defined.

$\lim_{x \to \infty} \sin x \cos x$ oscillates between -1 and 1 and
hence it's not defined.

$\lim_{x \to \infty} x - \sin x \cos x = \infty$

So, the numerator is $\infty$

Similary,

$\lim_{x \to \infty} -2 \sin x \cos x $ is undefined.

$\lim_{x \to \infty} \sin x $ is undefined.

$\lim_{x \to \infty} x(2 - \cos x) = \infty$

Combining them,

$\lim_{x \to \infty} \dfrac{x - \sin x \cos x}{2x - x\cos x + \sin x -
2\sin x \cos x}$ is an indeterminate form of type
$\dfrac{\infty}{\infty}$

* Solution 22

 f(x) =
\begin{cases}
\dfrac{\sin x}{x},  & \text{ $x \neq$ 0} \\
1, & \text{$x = 0$}
\end{cases}

** Solution a

$f'(x) = \lim_{h \to 0} \dfrac{f(x+h)-f(x)}{h}$

$f'(0) = \lim_{h \to 0} \dfrac{f(h)-f(0)}{h}$

$= \lim_{h \to 0} f(h) - f(0) /  \lim_{h \to 0} h$

$= \lim_{h \to 0} f(h) - 1 /  \lim_{h \to 0} h$

$= \lim_{h \to 0} \dfrac{\sin h - h}{h^2}$

Applying L'Hopital's rule:

$= \lim_{h \to 0} \dfrac{\cos h - 1}{2h}$

$= \lim_{h \to 0} \dfrac{\sin h}{2} = 0$

So, $f'(0) = 0$

** Solution b

For $f'(0)$ to be continous at 0, it should be

$f'(0) = \lim_{x \to 0} f'(x)$ and the limit should exist.

We know that $f'(0) = 0$

Let's compute the one sided limit:

$\lim_{x \to 0^-} f'(x) = \lim_{x \to 0^-} \dfrac{\sin x}{x} = 1$

Since it's not equal to 0. So it is not continous.
